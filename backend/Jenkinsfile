pipeline {
    agent any

    tools {
        jdk 'JDK17'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Load Credentials') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'BACKEND_MESSAGE', variable: 'MATTERMOST_WEBHOOK_URL'),
                        string(credentialsId: 'DB_URL', variable: 'DB_URL'),
                        string(credentialsId: 'DB_USER', variable: 'DB_USER'),
                        string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                        string(credentialsId: 'JWT_SECRET_KEY', variable: 'JWT_SECRET_KEY'),
                        string(credentialsId: 'NAVER_CLIENT_ID', variable: 'NAVER_CLIENT_ID'),
                        string(credentialsId: 'NAVER_CLIENT_SECRET', variable: 'NAVER_CLIENT_SECRET'),
                        string(credentialsId: 'GOOGLE_CLIENT_ID', variable: 'GOOGLE_CLIENT_ID'),
                        string(credentialsId: 'GOOGLE_CLIENT_SECRET', variable: 'GOOGLE_CLIENT_SECRET'),
                        string(credentialsId: 'DOCKER_CONTAINER_NAME', variable: 'DOCKER_CONTAINER_NAME'),
                        string(credentialsId: 'DOCKER_IMAGE_NAME', variable: 'DOCKER_IMAGE_NAME'),
                        string(credentialsId: 'DOCKER_PORT', variable: 'DOCKER_PORT'),
                        string(credentialsId: 'REDIS_HOST', variable: 'REDIS_HOST'),
                        string(credentialsId: 'OPENAI_REMOVED', variable: 'OPENAI_REMOVED'),
                        string(credentialsId: 'REDIS_PASSWORD', variable: 'REDIS_PASSWORD'),
                        string(credentialsId: 'LIVEKIT_REMOVED', variable: 'LIVEKIT_REMOVED'),
                        string(credentialsId: 'LIVEKIT_API_SECRET', variable: 'LIVEKIT_API_SECRET'),
                        string(credentialsId: 'AWS_CLOUD_ACCESS_KEY', variable: 'AWS_CLOUD_ACCESS_KEY'),
                        string(credentialsId: 'AWS_CLOUD_SECRET_KEY', variable: 'AWS_CLOUD_SECRET_KEY')
                    ]) {
                        env.MATTERMOST_WEBHOOK_URL = MATTERMOST_WEBHOOK_URL
                        env.DB_URL = DB_URL
                        env.DB_USER = DB_USER
                        env.DB_PASSWORD = DB_PASSWORD
                        env.JWT_SECRET_KEY = JWT_SECRET_KEY
                        env.NAVER_CLIENT_ID = NAVER_CLIENT_ID
                        env.NAVER_CLIENT_SECRET = NAVER_CLIENT_SECRET
                        env.GOOGLE_CLIENT_ID = GOOGLE_CLIENT_ID
                        env.GOOGLE_CLIENT_SECRET = GOOGLE_CLIENT_SECRET
                        env.DOCKER_CONTAINER_NAME = DOCKER_CONTAINER_NAME 
                        env.DOCKER_IMAGE_NAME = DOCKER_IMAGE_NAME
                        env.DOCKER_PORT = DOCKER_PORT
                        env.REDIS_HOST = REDIS_HOST
                        env.OPENAI_REMOVED = OPENAI_REMOVED
                        env.REDIS_PASSWORD = REDIS_PASSWORD
                        env.LIVEKIT_REMOVED = LIVEKIT_REMOVED
                        env.LIVEKIT_API_SECRET = LIVEKIT_API_SECRET
                        env.AWS_CLOUD_ACCESS_KEY = AWS_CLOUD_ACCESS_KEY
                        env.AWS_CLOUD_SECRET_KEY = AWS_CLOUD_SECRET_KEY
                    }
                }
            }
        }

        stage('Build with Gradle') {
            steps {
                dir('backend') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build -x test'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('backend') {
                        sh 'docker build -t ${DOCKER_IMAGE_NAME} .'
                    }
                }
            }
        }

        stage('Deploy Backend') {
            steps {
                script {
                    sh """
                    docker stop ${DOCKER_CONTAINER_NAME} || true
                    docker rm ${DOCKER_CONTAINER_NAME} || true
                    docker run -d --name ${DOCKER_CONTAINER_NAME} --network starbooks \
                        -p 9097:9097 \
                        -e "DB_URL=${DB_URL}" \
                        -e "DB_USER=${DB_USER}" \
                        -e "DB_PASSWORD=${DB_PASSWORD}" \
                        -e "JWT_SECRET_KEY=${JWT_SECRET_KEY}" \
                        -e "NAVER_CLIENT_ID=${NAVER_CLIENT_ID}" \
                        -e "NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}" \
                        -e "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" \
                        -e "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" \
                        -e "OPENAI_REMOVED=${OPENAI_REMOVED}" \
                        -e "REDIS_HOST=${REDIS_HOST}" \
                        -e "REDIS_PASSWORD=${REDIS_PASSWORD}" \
                        -e "LIVEKIT_REMOVED=${LIVEKIT_REMOVED}" \
                        -e "LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}" \
                        ${DOCKER_IMAGE_NAME}
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                withCredentials([string(credentialsId: 'BACKEND_MESSAGE', variable: 'MATTERMOST_WEBHOOK_URL')]) {
                    def jsonMessage = """{
                        "attachments": [{
                            "text": "**✅ Backend Build 성공**\\\\n- 상태: SUCCESS\\\\n- [🔗 상세 정보](${env.BUILD_URL})",
                            "color": "#00FF00"
                        }]
                    }"""

                    sh """
                    echo '${jsonMessage}' > mattermost_payload.json
                    cat mattermost_payload.json
                    curl -X POST -H "Content-Type: application/json" --data @mattermost_payload.json '${MATTERMOST_WEBHOOK_URL}'
                    rm -f mattermost_payload.json
                    """
                }
            }
        }
        failure {
            script {
                withCredentials([string(credentialsId: 'BACKEND_MESSAGE', variable: 'MATTERMOST_WEBHOOK_URL')]) {
                    def jsonMessage = """{
                        "attachments": [{
                            "text": "**❌ Backend Build 실패**\\\\n- 상태: FAILURE\\\\n- [🔗 상세 정보](${env.BUILD_URL}/console) ",
                            "color": "#FF0000"
                        }]
                    }"""

                    sh """
                    echo '${jsonMessage}' > mattermost_payload.json
                    cat mattermost_payload.json
                    curl -X POST -H "Content-Type: application/json" --data @mattermost_payload.json '${MATTERMOST_WEBHOOK_URL}'
                    rm -f mattermost_payload.json
                    """
                }
            }
        }
    }
}
