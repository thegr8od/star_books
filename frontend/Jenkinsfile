pipeline {
    agent any

    environment {
        GIT_PROJECT_URL = credentails('GITLAB_PROJECT_URL')
        GIT_CREDENTIALS_ID = credentails('GITTOKEN')
        FRONTEND_BRANCH = credentails('FRONTEND_BRANCH')
        MATTERMOST_WEBHOOK_URL = credentails('FRONT_MESSAGE')
        NGINX_CONTAINER_NAME = credentails('NGINX_CONTAINER_NAME')
        FRONTEND_IMAGE_NAME = credentails('FRONTEND_IMAGE_NAME')
        DIST_PATH = credentails('DIST_PATH')
        HOST_DIST_PATH = credentails('HOST_DIST_PATH')
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${FRONTEND_BRANCH}"]],
                    userRemoteConfigs: [[
                        url: env.GIT_PROJECT_URL,
                        credentialsId: env.GIT_CREDENTIALS_ID
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('frontend') {  
                        sh 'docker build -t ${FRONTEND_IMAGE_NAME} .'  // Build Docker image
                    }
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                script {
                    sh '''
                    docker rm -f frontend-container || true
                    docker create --name frontend-container ${FRONTEND_IMAGE_NAME}
                    docker exec ${NGINX_CONTAINER_NAME} rm -rf ${DIST_PATH}/*
                    rm -rf ${HOST_DIST_PATH}
                    mkdir -p ${HOST_DIST_PATH}
                    docker cp frontend-container:/dist/. ${HOST_DIST_PATH}/
                    docker cp ${HOST_DIST_PATH}/. ${NGINX_CONTAINER_NAME}:${DIST_PATH}/
                    docker rm frontend-container
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                def message = """{
                    "text": "✅ *Frontend Build 성공*\n- 상태: ${currentBuild.result}\n- 상세 정보: ${env.BUILD_URL}"
                }"""
                sh "curl -X POST -H 'Content-Type: application/json' -d '${message}' ${MATTERMOST_WEBHOOK_URL}"
            }
        }
        failure {
            script {
                def message = """{
                    "text": "❌ *Frontend Build 실패*\n- 상태: ${currentBuild.result}\n- 상세 정보: ${env.BUILD_URL}/console"
                }"""
                sh "curl -X POST -H 'Content-Type: application/json' -d '${message}' ${MATTERMOST_WEBHOOK_URL}"
            }
        }
    }
}
