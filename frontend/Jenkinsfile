pipeline {
    agent any

    environment {
        FRONTEND_BRANCH = 'feature-frontend'
    }

    stages {
        stage('Load Credentials') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'FRONT_MESSAGE', variable: 'MATTERMOST_WEBHOOK_URL'),
                        string(credentialsId: 'NGINX_CONTAINER_NAME', variable: 'NGINX_CONTAINER_NAME'),
                        string(credentialsId: 'FRONTEND_IMAGE_NAME', variable: 'FRONTEND_IMAGE_NAME'),
                        string(credentialsId: 'DIST_PATH', variable: 'DIST_PATH'),
                        string(credentialsId: 'HOST_DIST_PATH', variable: 'HOST_DIST_PATH')
                    ]) {

                        env.MATTERMOST_WEBHOOK_URL = MATTERMOST_WEBHOOK_URL
                        env.NGINX_CONTAINER_NAME = NGINX_CONTAINER_NAME
                        env.FRONTEND_IMAGE_NAME = FRONTEND_IMAGE_NAME
                        env.DIST_PATH = DIST_PATH
                        env.HOST_DIST_PATH = HOST_DIST_PATH

                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('frontend') {  
                        sh '''#!/bin/bash
                        docker build -t "$FRONTEND_IMAGE_NAME" .
                        '''
                    }
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                script {
                    sh '''#!/bin/bash
                    docker rm -f frontend-container || true
                    docker create --name frontend-container "$FRONTEND_IMAGE_NAME"
                    docker exec "$NGINX_CONTAINER_NAME" rm -rf "$DIST_PATH"/*
                    rm -rf "$HOST_DIST_PATH"
                    mkdir -p "$HOST_DIST_PATH"
                    docker cp frontend-container:/dist/. "$HOST_DIST_PATH"/
                    docker cp "$HOST_DIST_PATH"/. "$NGINX_CONTAINER_NAME":"$DIST_PATH"/
                    docker rm frontend-container
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                sh '''#!/bin/bash
                curl -X POST -H "Content-Type: application/json" --data @- <<EOF
                {
                    "text": "✅ *Frontend Build 성공*\n- 상태: ${currentBuild.result}\n- 상세 정보: ${env.BUILD_URL}"
                }
                EOF
                ''' > "$MATTERMOST_WEBHOOK_URL"
            }
        }
        failure {
            script {
                sh '''#!/bin/bash
                curl -X POST -H "Content-Type: application/json" --data @- <<EOF
                {
                    "text": "❌ *Frontend Build 실패*\n- 상태: ${currentBuild.result}\n- 상세 정보: ${env.BUILD_URL}/console"
                }
                EOF
                ''' > "$MATTERMOST_WEBHOOK_URL"
            }
        }
    }
}
